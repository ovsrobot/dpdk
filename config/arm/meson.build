# SPDX-License-Identifier: BSD-3-Clause
# Copyright(c) 2017 Intel Corporation.
# Copyright(c) 2017 Cavium, Inc
# Copyright(c) 2020 PANTHEON.tech s.r.o.

# disable Arm drivers for all builds
disabled_drivers += ['net/avp', 'net/fm10k']

# common flags to all aarch64 builds, with lowest priority
flags_common_default = [
	# Accelarate rte_memcpy. Be sure to run unit test (memcpy_perf_autotest)
	# to determine the best threshold in code. Refer to notes in source file
	# (lib/librte_eal/arm/include/rte_memcpy_64.h) for more info.
	['RTE_ARCH_ARM64_MEMCPY', false],
	#	['RTE_ARM64_MEMCPY_ALIGNED_THRESHOLD', 2048],
	#	['RTE_ARM64_MEMCPY_UNALIGNED_THRESHOLD', 512],
	# Leave below RTE_ARM64_MEMCPY_xxx options commented out,
	# unless there are strong reasons.
	#	['RTE_ARM64_MEMCPY_SKIP_GCC_VER_CHECK', false],
	#	['RTE_ARM64_MEMCPY_ALIGN_MASK', 0xF],
	#	['RTE_ARM64_MEMCPY_STRICT_ALIGN', false],

	['RTE_SCHED_VECTOR', false],
	['RTE_ARM_USE_WFE', false],
	['RTE_ARCH_ARM64', true],
	['RTE_CACHE_LINE_SIZE', 128]
]
native_machine_args = ['-march=native', '-mtune=native']

flags_part_number_thunderx = [
	['RTE_MACHINE', '"thunderx"'],
	['RTE_USE_C11_MEM_MODEL', false]
]
part_number_config_arm = {
	'0xd03': {'machine_args':  ['-mcpu=cortex-a53']},
	'0xd04': {'machine_args':  ['-mcpu=cortex-a35']},
	'0xd07': {'machine_args':  ['-mcpu=cortex-a57']},
	'0xd08': {'machine_args':  ['-mcpu=cortex-a72']},
	'0xd09': {'machine_args':  ['-mcpu=cortex-a73']},
	'0xd0a': {'machine_args':  ['-mcpu=cortex-a75']},
	'0xd0b': {'machine_args':  ['-mcpu=cortex-a76']},
	'0xd0c': {
		'machine_args':  ['-march=armv8.2-a+crypto', '-mcpu=neoverse-n1'],
		'flags': [
			['RTE_MACHINE', '"neoverse-n1"'],
			['RTE_ARM_FEATURE_ATOMICS', true],
			['RTE_USE_C11_MEM_MODEL', true],
			['RTE_MAX_MEM_MB', 1048576],
			['RTE_CACHE_LINE_SIZE', 64],
			['RTE_MAX_LCORE', 64],
			['RTE_MAX_NUMA_NODES', 1]
		]
	}
}

## Arm implementers (ID from MIDR in Arm Architecture Reference Manual)
## Part numbers are specific to Arm implementers
# implementer specific aarch64 flags have middle priority
#     (will overwrite common flags)
# part number specific aarch64 flags have higher priority
#     (will overwrite both common and implementer specific flags)
implementers = {
	'generic': {
		'description': 'Generic armv8',
		'flags': [
			['RTE_MACHINE', '"armv8a"'],
			['RTE_USE_C11_MEM_MODEL', true],
			['RTE_CACHE_LINE_SIZE', 128],
			['RTE_MAX_LCORE', 256],
			['RTE_MAX_NUMA_NODES', 4]
		],
		'part_number_config': {
			'generic': {'machine_args':  ['-march=armv8-a+crc', '-moutline-atomics']}
		}
	},
	'0x41': {
		'description': 'Arm',
		'flags': [
			['RTE_MACHINE', '"armv8a"'],
			['RTE_USE_C11_MEM_MODEL', true],
			['RTE_CACHE_LINE_SIZE', 64],
			['RTE_MAX_LCORE', 16],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'part_number_config': part_number_config_arm
	},
	'0x43': {
		'description': 'Cavium',
		'flags': [
			['RTE_MAX_VFIO_GROUPS', 128],
			['RTE_CACHE_LINE_SIZE', 128],
			['RTE_MAX_LCORE', 96],
			['RTE_MAX_NUMA_NODES', 2]
		],
		'part_number_config': {
			'0xa1': {
				'machine_args': ['-mcpu=thunderxt88'],
				'flags': flags_part_number_thunderx
			},
			'0xa2': {
				'machine_args': ['-mcpu=thunderxt81'],
				'flags': flags_part_number_thunderx
			},
			'0xa3': {
				'machine_args': ['-mcpu=thunderxt83'],
				'flags': flags_part_number_thunderx
			},
			'0xaf': {
				'machine_args': ['-march=armv8.1-a+crc+crypto','-mcpu=thunderx2t99'],
				'flags': [
					['RTE_MACHINE', '"thunderx2"'],
					['RTE_ARM_FEATURE_ATOMICS', true],
					['RTE_USE_C11_MEM_MODEL', true],
					['RTE_CACHE_LINE_SIZE', 64],
					['RTE_MAX_LCORE', 256],
					['RTE_MAX_NUMA_NODES', 2]
				]
			},
			'0xb2': {
				'machine_args': ['-march=armv8.2-a+crc+crypto+lse','-mcpu=octeontx2'],
				'flags': [
					['RTE_MACHINE', '"octeontx2"'],
					['RTE_ARM_FEATURE_ATOMICS', true],
					['RTE_USE_C11_MEM_MODEL', true],
					['RTE_MAX_LCORE', 36],
					['RTE_MAX_NUMA_NODES', 1]
				]
			}
		}
	},
	'0x50': {
		'description': 'Ampere Computing',
		'flags': [
			['RTE_MACHINE', '"emag"'],
			['RTE_CACHE_LINE_SIZE', 64],
			['RTE_MAX_LCORE', 32],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'part_number_config': {
			'0x0': {'machine_args':  ['-march=armv8-a+crc+crypto', '-mtune=emag']}
		}
	},
	'0x56': {
		'description': 'Marvell ARMADA',
		'flags': [
			['RTE_MACHINE', '"armv8a"'],
			['RTE_CACHE_LINE_SIZE', 64],
			['RTE_MAX_LCORE', 16],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'part_number_config': part_number_config_arm
	},
	'dpaa': {
		'description': 'NXP DPAA',
		'flags': [
			['RTE_MACHINE', '"dpaa"'],
			['RTE_LIBRTE_DPAA2_USE_PHYS_IOVA', false],
			['RTE_USE_C11_MEM_MODEL', true],
			['RTE_CACHE_LINE_SIZE', 64],
			['RTE_MAX_LCORE', 16],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'part_number_config': part_number_config_arm
	}
}

# soc specific aarch64 flags have the highest priority
#     (will overwrite all other flags)
socs = {
	'generic': {
		'implementer': 'generic',
		'part_number': 'generic',
		'flags': []
	},
	'armada': {
		'implementer': '0x56',
		'flags': [
			['RTE_MAX_LCORE', 16],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'numa': false,
		'disabled_drivers': ['bus/dpaa', 'bus/fslmc', 'common/dpaax']
	},
	'bluefield': {
		'implementer': '0x41',
		'part_number': '0xd08',
		'flags': [
			['RTE_MAX_LCORE', 16],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'numa': false
	},
	'dpaa': {
		'implementer': 'dpaa',
		'flags': [
			['RTE_MAX_LCORE', 16],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'numa': false
	},
	'emag': {
		'implementer': '0x50',
		'part_number': '0x0',
		'flags': [
			['RTE_MAX_LCORE', 32],
			['RTE_MAX_NUMA_NODES', 1]
		]
	},
	'graviton2': {
		'implementer': '0x41',
		'part_number': '0xd0c',
		'flags': [
			['RTE_MAX_LCORE', 64],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'numa': false
	},
	'n1sdp': {
		'implementer': '0x41',
		'part_number': '0xd0c',
		'flags': [
			['RTE_MAX_LCORE', 4],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'numa': false
	},
	'octeontx2': {
		'implementer': '0x43',
		'part_number': '0xb2',
		'flags': [
			['RTE_MAX_LCORE', 32],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'numa': false
	},
	'stingray': {
		'implementer': '0x41',
		'part_number': '0xd08',
		'flags': [
			['RTE_MAX_LCORE', 16],
			['RTE_MAX_NUMA_NODES', 1]
		],
		'numa': false
	},
	'thunderx2': {
		'implementer': '0x43',
		'part_number': '0xaf',
		'flags': [
			['RTE_MAX_LCORE', 256],
			['RTE_MAX_NUMA_NODES', 2]
		]
	},
	'thunderxt88': {
		'implementer': '0x43',
		'part_number': '0xa1',
		'flags': [
			['RTE_MAX_LCORE', 96],
			['RTE_MAX_NUMA_NODES', 1]
		]
	}
}

dpdk_conf.set('RTE_ARCH_ARM', 1)
dpdk_conf.set('RTE_FORCE_INTRINSICS', 1)

if dpdk_conf.get('RTE_ARCH_32')
	# armv7 build
	dpdk_conf.set('RTE_CACHE_LINE_SIZE', 64)
	dpdk_conf.set('RTE_ARCH_ARMv7', 1)
	# the minimum architecture supported, armv7-a, needs the following,
	machine_args += '-mfpu=neon'
else
	# aarch64 build
	use_native_machine_args = false
	arm_soc = get_option('arm_soc')
	soc_config = {}
	if not meson.is_cross_build()
		if machine == 'generic'
			# generic build
			if arm_soc != ''
				error('Arm SoC is unsupported with generic build.')
			endif
			implementer_id = 'generic'
			part_number = 'generic'
		elif arm_soc != ''
			soc_config = socs.get(arm_soc, {'not_supported': true})
		else
			# native build
			# The script returns ['Implementer', 'Variant', 'Architecture',
			# 'Primary Part number', 'Revision']
			detect_vendor = find_program(join_paths(
					meson.current_source_dir(), 'armv8_machine.py'))
			cmd = run_command(detect_vendor.path())
			if cmd.returncode() == 0
				cmd_output = cmd.stdout().to_lower().strip().split(' ')
				implementer_id = cmd_output[0]
				part_number = cmd_output[3]
			else
				error('Error when getting Arm Implementer ID and part number.')
			endif
			use_native_machine_args = true
		endif
	else
		# cross build
		arm_soc = meson.get_cross_property('soc', '')
		if arm_soc == ''
			error('Arm SoC must be specified in the cross file.')
		endif
		soc_config = socs.get(arm_soc, {'not_supported': true})
	endif

	soc_flags = []
	if soc_config.has_key('not_supported')
		error('SoC @0@ not supported.'.format(arm_soc))
	elif soc_config != {}
		implementer_id = soc_config['implementer']
		implementer_config = implementers[implementer_id]
		part_number = soc_config['part_number']
		soc_flags = soc_config['flags']
		if not soc_config.get('numa', true)
			has_libnuma = 0
		endif
		if soc_config.has_key('disabled_drivers')
			disabled_drivers += soc_config['disabled_drivers']
		endif
	endif

	if implementers.has_key(implementer_id)
		implementer_config = implementers[implementer_id]
	else
		error('Unsupported Arm implementer: @0@. '.format(implementer_id) +
		      'Please add support for it or use the generic ' +
		      '(-Dmachine=generic) build.')
	endif

	message('Arm implementer: ' + implementer_config['description'])
	message('Arm part number: ' + part_number)

	part_number_config = implementer_config['part_number_config']
	if part_number_config.has_key(part_number)
		# use the specified part_number machine args if found
		part_number_config = part_number_config[part_number]
	else
		# unknown part number
		error('Unsupported part number @0@ of implementer @1@. '
		      .format(part_number, implementer_id) +
		      'Please add support for it or use the generic ' +
		      '(-Dmachine=generic) build.')
	endif

	# add flags in the proper order
	dpdk_flags = flags_common_default + implementer_config['flags'] + part_number_config.get('flags', []) + soc_flags

	# apply supported machine args
	machine_args = [] # Clear previous machine args
	if use_native_machine_args
		candidate_machine_args = native_machine_args
	else
		candidate_machine_args = part_number_config['machine_args']
	endif
	foreach flag: candidate_machine_args
		if cc.has_argument(flag)
			machine_args += flag
		endif
	endforeach

	# apply flags
	foreach flag: dpdk_flags
		if flag.length() > 0
			dpdk_conf.set(flag[0], flag[1])
		endif
	endforeach
endif
message('Using machine args: @0@'.format(machine_args))

if (cc.get_define('__ARM_NEON', args: machine_args) != '' or
    cc.get_define('__aarch64__', args: machine_args) != '')
	compile_time_cpuflags += ['RTE_CPUFLAG_NEON']
endif

if cc.get_define('__ARM_FEATURE_CRC32', args: machine_args) != ''
	compile_time_cpuflags += ['RTE_CPUFLAG_CRC32']
endif

if cc.get_define('__ARM_FEATURE_CRYPTO', args: machine_args) != ''
	compile_time_cpuflags += ['RTE_CPUFLAG_AES', 'RTE_CPUFLAG_PMULL',
	'RTE_CPUFLAG_SHA1', 'RTE_CPUFLAG_SHA2']
endif
