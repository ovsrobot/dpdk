/* SPDX-License-Identifier: BSD-3-Clause
 * Copyright(c) 2018-2022 Shenzhen 3SNIC Information Technology Co., Ltd.
 */

#ifndef _SSSNIC_MSG_H_
#define _SSSNIC_MSG_H_

#include <string.h>

enum sssnic_msg_chann_id {
	SSSNIC_MSG_CHAN_MPU = 0, /* Message comes from MPU directly */
	SSSNIC_MSG_CHAN_MBOX = 1, /* Message comes from MBOX */
	SSSNIC_MSG_CHAN_COUNT = 2,
};

enum sssnic_msg_src {
	SSSNIC_MSG_SRC_MPU, /* mbox message from MPU */
	SSSNIC_MSG_SRC_PF, /* mbox message from PF */
	SSSNIC_MSG_SRC_COUNT,
};

#define SSSNIC_MSG_SRC(func_id)                                                \
	(((func_id) == SSSNIC_MPU_FUNC_IDX) ? SSSNIC_MSG_SRC_MPU :             \
						    SSSNIC_MSG_SRC_PF)

enum sssnic_msg_type {
	SSSNIC_MSG_TYPE_REQ, /* Request message*/
	SSSNIC_MSG_TYPE_RESP, /* Response message */
	SSSNIC_MSG_TYPE_CONUT,
};

#define SSSNIC_MSG_TRANS_MODE_DMA 1
#define SSSNIC_MSG_TRANS_MODE_INLINE 0

/* hardware format of sssnic message header */
struct sssnic_msg_hdr {
	union {
		uint64_t u64;
		struct {
			uint32_t dw0;
			uint32_t dw1;
		};
		struct {
			/* Id of the function the message comes from or send to */
			uint64_t function : 13;
			/* indicate the result of command */
			uint64_t status : 2;
			/* Mbox channel that message receive from or send to */
			uint64_t channel : 1;
			/* ID of the EventQ that response message is informed by */
			uint64_t eventq : 2;
			/* Message ID */
			uint64_t id : 4;
			/* Command ID of the message */
			uint64_t command : 10;
			/* total length of message data */
			uint64_t length : 11;
			/* Module of message comes from or send to */
			uint64_t module : 5;
			/* Length of this data segment */
			uint64_t seg_len : 6;
			/* needless response indication */
			uint64_t no_response : 1;
			/* Message data transmission mode, 0: inline 1:dma */
			uint64_t trans_mode : 1;
			/* Segment sequence of message data */
			uint64_t seg_id : 6;
			/* Last data segment indication, 1: Last segment */
			uint64_t last_seg : 1;
			/* Message type, see sssnic_mbox_msg_type */
			uint64_t type : 1;
		};
	};
};
#define SSSNIC_MSG_HDR_SIZE sizeof(struct sssnic_msg_hdr)
#define SSSNIC_MSG_DATA(hdr) (((uint8_t *)hdr) + SSSNIC_MSG_HDR_SIZE)

#define SSSNIC_MSG_BUF_SIZE 2048UL
#define SSSNIC_MSG_MAX_SEG_SIZE 48
#define SSSNIC_MSG_MIN_SGE_ID 0
#define SSSNIC_MSG_MAX_SEG_ID 42
#define SSSNIC_MSG_MAX_DATA_SIZE (SSSNIC_MSG_BUF_SIZE - SSSNIC_MSG_HDR_SIZE)

struct sssnic_msg {
	/* message command ID */
	uint16_t command;
	/* function id of that message send to or receive from */
	uint16_t func;
	/* module id of that message send to or receive from */
	uint32_t module;
	/* message is request or response*/
	enum sssnic_msg_type type;
	/* message data */
	uint8_t *data_buf;
	/* data length */
	uint32_t data_len;
	/* need response indication */
	uint8_t ack;
	/* the id of last received segment*/
	uint8_t seg;
	/* indicate the result of request in response message, request failed if not 0 */
	uint8_t status;
	/* generated by sender if dir == SSSNIC_MSG_TYPE_REQ */
	uint8_t id;
};

#define SSSNIC_MSG_REJECT -1
#define SSSNIC_MSG_ACCEPT 0
#define SSSNIC_MSG_DONE 1

/* sssnic message handler function
 * @return
 *   SSSNIC_MSG_REJECT - Message failed to handle
 *   SSSNIC_MSG_DONE   - Message succeed to handle
 */
typedef int sssnic_msg_handler_func_t(struct sssnic_msg *msg,
	enum sssnic_msg_chann_id chan_id, void *priv);

struct sssnic_msg_handler {
	sssnic_msg_handler_func_t *func;
	void *priv;
};

struct sssnic_msg_channel {
	enum sssnic_msg_chann_id id;
	struct sssnic_msg msg[SSSNIC_MSG_TYPE_CONUT][SSSNIC_MSG_SRC_COUNT];
	struct sssnic_msg_handler handler[SSSNIC_MSG_TYPE_CONUT];
};

struct sssnic_msg_inbox {
	struct sssnic_hw *hw;
	struct sssnic_msg_channel channel[SSSNIC_MSG_CHAN_COUNT];
};

#define SSSNIC_MSG_INBOX(hw) ((hw)->msg_inbox)
#define SSSNIC_MSG_CHANNEL(hw, chann_id)                                       \
	(&(SSSNIC_MSG_INBOX(hw)->channel[chann_id]))
#define SSSNIC_MSG_LOCATE(hw, chann_id, type, src)                             \
	(&SSSNIC_MSG_CHANNEL(hw, chann_id)->msg[type][src])
#define SSSNIC_MSG_HANDLER(hw, chann_id, type)                                 \
	(&SSSNIC_MSG_CHANNEL(hw, chann_id)->handler[type])

static inline void
sssnic_msg_init(struct sssnic_msg *msg, uint8_t *data, uint32_t data_len,
	uint16_t command, uint16_t func, uint32_t module,
	enum sssnic_msg_type type)
{
	memset(msg, 0, sizeof(struct sssnic_msg));
	msg->data_buf = data;
	msg->data_len = data_len;
	msg->command = command;
	msg->module = module;
	msg->func = func;
	msg->type = type;
}

int sssnic_msg_rx_handler_register(struct sssnic_hw *hw,
	enum sssnic_msg_chann_id chann_id, enum sssnic_msg_type msg_type,
	sssnic_msg_handler_func_t *func, void *priv);
int sssnic_msg_rx_handle(struct sssnic_hw *hw, struct sssnic_msg_hdr *msghdr);
int sssnic_msg_inbox_init(struct sssnic_hw *hw);
void sssnic_msg_inbox_shutdown(struct sssnic_hw *hw);
int sssnic_msg_rx(struct sssnic_msg_hdr *msghdr, uint16_t max_seg_len,
	uint16_t max_seg_id, struct sssnic_msg *msg);

#endif /* _SSSNIC_MSG_H_ */
