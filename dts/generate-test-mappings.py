#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-3-Clause
# Copyright(c) 2024 Arm Limited

"""Test Suites to Configuration mappings generation script."""

import os
from collections import defaultdict
from textwrap import indent
from typing import Iterable

from framework.config.test_suite import BaseTestSuitesConfigs, TestSuiteConfig
from framework.exception import InternalError
from framework.test_suite import AVAILABLE_TEST_SUITES, TestSuiteSpec

DTS_DIR = os.path.dirname(os.path.realpath(__file__))
SCRIPT_FILE_NAME = os.path.basename(__file__)

FRAMEWORK_IMPORTS = [BaseTestSuitesConfigs, TestSuiteConfig]

RELATIVE_PATH_TO_GENERATED_FILE = "framework/config/generated.py"
SMOKE_TESTS_SUITE_NAME = "smoke_tests"
CUSTOM_CONFIG_TYPES_VAR_NAME = "CUSTOM_CONFIG_TYPES"
CUSTOM_CONFIG_LINKING_FUNCTION_NAME = "fix_custom_config_annotations"
CUSTOM_CONFIG_LINKING_FUNCTION_DOCSTRING = [
    '"""Fixes the custom config types annotations.',
    "",
    f"Moreover it also fills `{CUSTOM_CONFIG_TYPES_VAR_NAME}` with all the custom config types.",
    '"""',
]
TEST_SUITES_CONFIG_CLASS_NAME = "TestSuitesConfigs"
TEST_SUITES_CONFIG_CLASS_DOCSTRING = [
    '"""Configuration mapping class to select and configure the test suites.',
    "",
    "Before using this class, the custom configuration type annotations need to be fixed.",
    f"To do so, you need to call the `{CUSTOM_CONFIG_LINKING_FUNCTION_NAME}` method.",
    '"""',
]


GENERATED_FILE_HEADER = f"""# SPDX-License-Identifier: BSD-3-Clause
# Copyright(c) 2024 The DPDK contributors
# This file is automatically generated by {SCRIPT_FILE_NAME}.
# Do NOT modify this file manually.

\"\"\"Generated file containing the links between the test suites and the configuration.\"\"\"
"""


def join(lines: Iterable[str]) -> str:
    """Join list of strings into text lines."""
    return "\n".join(lines)


def join_and_indent(lines: Iterable[str], indentation_level=1, indentation_spaces=4) -> str:
    """Join list of strings into indented text lines."""
    return "\n".join([indent(line, " " * indentation_level * indentation_spaces) for line in lines])


def format_attributes_types(test_suite_spec: TestSuiteSpec):
    """Format the config type into the respective configuration class field attribute type."""
    config_type = test_suite_spec.config_type.__name__
    if config_type != TestSuiteConfig.__name__:
        config_type = f'"{config_type}"'
    return f"Optional[{config_type}]"


try:
    framework_imports: dict[str, list[str]] = defaultdict(list)
    for _import in FRAMEWORK_IMPORTS:
        framework_imports[_import.__module__].append(_import.__name__)
    formatted_framework_imports = sorted(
        [
            f"from {module} import {', '.join(sorted(imports))}"
            for module, imports in framework_imports.items()
        ]
    )

    test_suites = [
        test_suite_spec
        for test_suite_spec in AVAILABLE_TEST_SUITES
        if test_suite_spec.name != SMOKE_TESTS_SUITE_NAME
    ]

    custom_configs = [t for t in test_suites if t.config_type is not TestSuiteConfig]

    custom_config_imports = [
        f"from {t.module_type.__name__} import {t.config_type.__name__}" for t in custom_configs
    ]

    test_suites_attributes = [f"{t.name}: {format_attributes_types(t)} = None" for t in test_suites]

    custom_config_assignments = [
        f'{CUSTOM_CONFIG_TYPES_VAR_NAME}["{t.name}"] = {t.config_type.__name__}'
        for t in custom_configs
    ]

    generated_file_contents = f"""{GENERATED_FILE_HEADER}
from typing import TYPE_CHECKING, Optional

{join(formatted_framework_imports)}

if TYPE_CHECKING:
{join_and_indent(custom_config_imports)}


{CUSTOM_CONFIG_TYPES_VAR_NAME}: dict[str, type[{TestSuiteConfig.__name__}]] = {'{}'}


class {TEST_SUITES_CONFIG_CLASS_NAME}({BaseTestSuitesConfigs.__name__}):
{join_and_indent(TEST_SUITES_CONFIG_CLASS_DOCSTRING)}

{join_and_indent(test_suites_attributes)}

    @classmethod
    def {CUSTOM_CONFIG_LINKING_FUNCTION_NAME}(cls):
{join_and_indent(CUSTOM_CONFIG_LINKING_FUNCTION_DOCSTRING, indentation_level=2)}
{join_and_indent(custom_config_imports, indentation_level=2)}

{join_and_indent(custom_config_assignments, indentation_level=2)}

        cls.model_rebuild()
"""

    path = os.path.join(DTS_DIR, RELATIVE_PATH_TO_GENERATED_FILE)

    with open(path, "w") as generated_file:
        generated_file.write(generated_file_contents)

    print("Test suites to configuration mappings generated successfully!")
except Exception as e:
    raise InternalError("Failed to generate test suites to configuration mappings.") from e
