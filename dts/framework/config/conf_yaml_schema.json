{
  "$defs": {
    "Architecture": {
      "description": "The supported architectures of :class:`~framework.testbed_model.node.Node`\\s.",
      "enum": [
        "i686",
        "x86_64",
        "x86_32",
        "arm64",
        "ppc64le"
      ],
      "title": "Architecture",
      "type": "string"
    },
    "BuildTargetConfiguration": {
      "additionalProperties": false,
      "description": "DPDK build configuration.\n\nThe configuration used for building DPDK.\n\nAttributes:\n    arch: The target architecture to build for.\n    os: The target os to build for.\n    cpu: The target CPU to build for.\n    compiler: The compiler executable to use.\n    compiler_wrapper: This string will be put in front of the compiler when\n        executing the build. Useful for adding wrapper commands, such as ``ccache``.",
      "properties": {
        "arch": {
          "$ref": "#/$defs/Architecture"
        },
        "os": {
          "$ref": "#/$defs/OS"
        },
        "cpu": {
          "$ref": "#/$defs/CPUType"
        },
        "compiler": {
          "$ref": "#/$defs/Compiler"
        },
        "compiler_wrapper": {
          "default": "",
          "title": "Compiler Wrapper",
          "type": "string"
        }
      },
      "required": [
        "arch",
        "os",
        "cpu",
        "compiler"
      ],
      "title": "BuildTargetConfiguration",
      "type": "object"
    },
    "CPUType": {
      "description": "The supported CPUs of :class:`~framework.testbed_model.node.Node`\\s.",
      "enum": [
        "native",
        "armv8a",
        "dpaa2",
        "thunderx",
        "xgene1"
      ],
      "title": "CPUType",
      "type": "string"
    },
    "Compiler": {
      "description": "The supported compilers of :class:`~framework.testbed_model.node.Node`\\s.",
      "enum": [
        "gcc",
        "clang",
        "icc",
        "msvc"
      ],
      "title": "Compiler",
      "type": "string"
    },
    "HelloWorldConfig": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "test_cases": {
              "items": {
                "type": "string"
              },
              "title": "Test Cases",
              "type": "array"
            },
            "timeout": {
              "default": 50,
              "title": "Timeout",
              "type": "integer"
            }
          },
          "type": "object"
        },
        {
          "type": "string"
        }
      ],
      "description": "Example custom configuration for the `TestHelloWorld` test suite.",
      "title": "HelloWorldConfig"
    },
    "HugepageConfiguration": {
      "additionalProperties": false,
      "description": "The hugepage configuration of :class:`~framework.testbed_model.node.Node`\\s.\n\nAttributes:\n    number_of: The number of hugepages to allocate.\n    force_first_numa: If :data:`True`, the hugepages will be configured on the first NUMA node.",
      "properties": {
        "number_of": {
          "title": "Number Of",
          "type": "integer"
        },
        "force_first_numa": {
          "title": "Force First Numa",
          "type": "boolean"
        }
      },
      "required": [
        "number_of",
        "force_first_numa"
      ],
      "title": "HugepageConfiguration",
      "type": "object"
    },
    "OS": {
      "description": "The supported operating systems of :class:`~framework.testbed_model.node.Node`\\s.",
      "enum": [
        "linux",
        "freebsd",
        "windows"
      ],
      "title": "OS",
      "type": "string"
    },
    "PortConfig": {
      "additionalProperties": false,
      "description": "The port configuration of :class:`~framework.testbed_model.node.Node`\\s.\n\nAttributes:\n    pci: The PCI address of the port.\n    os_driver_for_dpdk: The operating system driver name for use with DPDK.\n    os_driver: The operating system driver name when the operating system controls the port.\n    peer_node: The :class:`~framework.testbed_model.node.Node` of the port\n        connected to this port.\n    peer_pci: The PCI address of the port connected to this port.",
      "properties": {
        "pci": {
          "description": "The local PCI address of the port.",
          "pattern": "^[\\da-fA-F]{4}:[\\da-fA-F]{2}:[\\da-fA-F]{2}.\\d:?\\w*$",
          "title": "Pci",
          "type": "string"
        },
        "os_driver_for_dpdk": {
          "description": "The driver that the kernel should bind this device to for DPDK to use it.",
          "examples": [
            "vfio-pci",
            "mlx5_core"
          ],
          "title": "Os Driver For Dpdk",
          "type": "string"
        },
        "os_driver": {
          "description": "The driver normally used by this port",
          "examples": [
            "i40e",
            "ice",
            "mlx5_core"
          ],
          "title": "Os Driver",
          "type": "string"
        },
        "peer_node": {
          "description": "The name of the peer node this port is connected to.",
          "title": "Peer Node",
          "type": "string"
        },
        "peer_pci": {
          "description": "The PCI address of the peer port this port is connected to.",
          "pattern": "^[\\da-fA-F]{4}:[\\da-fA-F]{2}:[\\da-fA-F]{2}.\\d:?\\w*$",
          "title": "Peer Pci",
          "type": "string"
        }
      },
      "required": [
        "pci",
        "os_driver_for_dpdk",
        "os_driver",
        "peer_node",
        "peer_pci"
      ],
      "title": "PortConfig",
      "type": "object"
    },
    "ScapyTrafficGeneratorConfig": {
      "additionalProperties": false,
      "description": "Scapy traffic generator specific configuration.",
      "properties": {
        "type": {
          "const": "SCAPY",
          "enum": [
            "SCAPY"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "title": "ScapyTrafficGeneratorConfig",
      "type": "object"
    },
    "SutNodeConfiguration": {
      "additionalProperties": false,
      "description": ":class:`~framework.testbed_model.sut_node.SutNode` specific configuration.\n\nAttributes:\n    memory_channels: The number of memory channels to use when running DPDK.",
      "properties": {
        "name": {
          "description": "A unique identifier for this node.",
          "title": "Name",
          "type": "string"
        },
        "hostname": {
          "description": "The hostname or IP address of the node.",
          "title": "Hostname",
          "type": "string"
        },
        "user": {
          "description": "The login user to use to connect to this node.",
          "title": "User",
          "type": "string"
        },
        "password": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The login password to use to connect to this node. SSH keys are STRONGLY preferred, use only as last resort.",
          "title": "Password"
        },
        "use_first_core": {
          "default": false,
          "description": "DPDK won't use the first physical core if set to False.",
          "title": "Use First Core",
          "type": "boolean"
        },
        "hugepages_2mb": {
          "anyOf": [
            {
              "$ref": "#/$defs/HugepageConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "ports": {
          "items": {
            "$ref": "#/$defs/PortConfig"
          },
          "minItems": 1,
          "title": "Ports",
          "type": "array"
        },
        "memory_channels": {
          "default": 1,
          "description": "Number of memory channels to use when running DPDK.",
          "title": "Memory Channels",
          "type": "integer"
        },
        "arch": {
          "$ref": "#/$defs/Architecture"
        },
        "os": {
          "$ref": "#/$defs/OS"
        },
        "lcores": {
          "default": "1",
          "description": "Comma-separated list of logical cores to use. An empty string means use all lcores.",
          "examples": [
            "1,2,3,4,5,18-22",
            "10-15"
          ],
          "pattern": "^(([0-9]+|([0-9]+-[0-9]+))(,([0-9]+|([0-9]+-[0-9]+)))*)?$",
          "title": "Lcores",
          "type": "string"
        }
      },
      "required": [
        "name",
        "hostname",
        "user",
        "ports",
        "arch",
        "os"
      ],
      "title": "SutNodeConfiguration",
      "type": "object"
    },
    "TGNodeConfiguration": {
      "additionalProperties": false,
      "description": ":class:`~framework.testbed_model.tg_node.TGNode` specific configuration.\n\nAttributes:\n    traffic_generator: The configuration of the traffic generator present on the TG node.",
      "properties": {
        "name": {
          "description": "A unique identifier for this node.",
          "title": "Name",
          "type": "string"
        },
        "hostname": {
          "description": "The hostname or IP address of the node.",
          "title": "Hostname",
          "type": "string"
        },
        "user": {
          "description": "The login user to use to connect to this node.",
          "title": "User",
          "type": "string"
        },
        "password": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The login password to use to connect to this node. SSH keys are STRONGLY preferred, use only as last resort.",
          "title": "Password"
        },
        "use_first_core": {
          "default": false,
          "description": "DPDK won't use the first physical core if set to False.",
          "title": "Use First Core",
          "type": "boolean"
        },
        "hugepages_2mb": {
          "anyOf": [
            {
              "$ref": "#/$defs/HugepageConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "ports": {
          "items": {
            "$ref": "#/$defs/PortConfig"
          },
          "minItems": 1,
          "title": "Ports",
          "type": "array"
        },
        "arch": {
          "$ref": "#/$defs/Architecture"
        },
        "os": {
          "$ref": "#/$defs/OS"
        },
        "lcores": {
          "default": "1",
          "description": "Comma-separated list of logical cores to use. An empty string means use all lcores.",
          "examples": [
            "1,2,3,4,5,18-22",
            "10-15"
          ],
          "pattern": "^(([0-9]+|([0-9]+-[0-9]+))(,([0-9]+|([0-9]+-[0-9]+)))*)?$",
          "title": "Lcores",
          "type": "string"
        },
        "traffic_generator": {
          "discriminator": {
            "mapping": {
              "SCAPY": "#/$defs/ScapyTrafficGeneratorConfig"
            },
            "propertyName": "type"
          },
          "oneOf": [
            {
              "$ref": "#/$defs/ScapyTrafficGeneratorConfig"
            }
          ],
          "title": "Traffic Generator"
        }
      },
      "required": [
        "name",
        "hostname",
        "user",
        "ports",
        "arch",
        "os",
        "traffic_generator"
      ],
      "title": "TGNodeConfiguration",
      "type": "object"
    },
    "TestRunConfiguration": {
      "additionalProperties": false,
      "description": "The configuration of a test run.\n\nThe configuration contains testbed information, what tests to execute\nand with what DPDK build.\n\nAttributes:\n    build_targets: A list of DPDK builds to test.\n    perf: Whether to run performance tests.\n    func: Whether to run functional tests.\n    skip_smoke_tests: Whether to skip smoke tests.\n    test_suites: The names of test suites and/or test cases to execute.\n    system_under_test_node: The SUT node configuration to use in this test run.\n    traffic_generator_node: The TG node name to use in this test run.",
      "properties": {
        "perf": {
          "description": "Enable performance testing.",
          "title": "Perf",
          "type": "boolean"
        },
        "func": {
          "description": "Enable functional testing.",
          "title": "Func",
          "type": "boolean"
        },
        "build_targets": {
          "items": {
            "$ref": "#/$defs/BuildTargetConfiguration"
          },
          "title": "Build Targets",
          "type": "array"
        },
        "skip_smoke_tests": {
          "default": false,
          "title": "Skip Smoke Tests",
          "type": "boolean"
        },
        "test_suites": {
          "$ref": "#/$defs/TestSuitesConfigs"
        },
        "system_under_test_node": {
          "$ref": "#/$defs/TestRunSUTNodeConfiguration"
        },
        "traffic_generator_node": {
          "title": "Traffic Generator Node",
          "type": "string"
        }
      },
      "required": [
        "perf",
        "func",
        "build_targets",
        "test_suites",
        "system_under_test_node",
        "traffic_generator_node"
      ],
      "title": "TestRunConfiguration",
      "type": "object"
    },
    "TestRunSUTNodeConfiguration": {
      "additionalProperties": false,
      "description": "The SUT node configuration of a test run.\n\nAttributes:\n    node_name: The SUT node to use in this test run.\n    vdevs: The names of virtual devices to test.",
      "properties": {
        "vdevs": {
          "items": {
            "type": "string"
          },
          "title": "Vdevs",
          "type": "array"
        },
        "node_name": {
          "title": "Node Name",
          "type": "string"
        }
      },
      "required": [
        "node_name"
      ],
      "title": "TestRunSUTNodeConfiguration",
      "type": "object"
    },
    "TestSuiteConfig": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "test_cases": {
              "items": {
                "type": "string"
              },
              "title": "Test Cases",
              "type": "array"
            }
          },
          "type": "object"
        },
        {
          "type": "string"
        }
      ],
      "description": "Test suite configuration base model.\n\nBy default the configuration of a generic test suite does not contain any attributes. Any test\nsuite should inherit this class to create their own custom configuration. Finally override the\ntype of the :attr:`~TestSuite.config` to use the newly created one.\n\nAttributes:\n    test_cases_names: The names of test cases from this test suite to execute. If empty, all\n        test cases will be executed.",
      "title": "TestSuiteConfig"
    },
    "TestSuitesConfigs": {
      "additionalProperties": false,
      "description": "Configuration mapping class to select and configure the test suites.\n\nBefore using this class, the custom configuration type annotations need to be fixed.\nTo do so, you need to call the `fix_custom_config_annotations` method.",
      "properties": {
        "hello_world": {
          "anyOf": [
            {
              "$ref": "#/$defs/HelloWorldConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "os_udp": {
          "anyOf": [
            {
              "$ref": "#/$defs/TestSuiteConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "pmd_buffer_scatter": {
          "anyOf": [
            {
              "$ref": "#/$defs/TestSuiteConfig"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "title": "TestSuitesConfigs",
      "type": "object"
    }
  },
  "description": "DTS testbed and test configuration.\n\nAttributes:\n    test_runs: Test run configurations.\n    nodes: Node configurations.",
  "properties": {
    "test_runs": {
      "items": {
        "$ref": "#/$defs/TestRunConfiguration"
      },
      "minItems": 1,
      "title": "Test Runs",
      "type": "array"
    },
    "nodes": {
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/TGNodeConfiguration"
          },
          {
            "$ref": "#/$defs/SutNodeConfiguration"
          }
        ]
      },
      "minItems": 1,
      "title": "Nodes",
      "type": "array"
    }
  },
  "required": [
    "test_runs",
    "nodes"
  ],
  "title": "Configuration",
  "type": "object",
  "$schema": "https://json-schema.org/draft/2020-12/schema"
}