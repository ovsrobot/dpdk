/* SPDX-License-Identifier: BSD-3-Clause
 * Copyright(C) 2023 Marvell.
 */

#ifndef __TEST_CRYPTODEV_EDDSA_TEST_VECTORS_H__
#define __TEST_CRYPTODEV_EDDSA_TEST_VECTORS_H__

#include "rte_crypto_asym.h"

struct crypto_testsuite_eddsa_params {
	rte_crypto_param pubkey;
	rte_crypto_param pkey;
	rte_crypto_param sign;
	rte_crypto_param message;
	rte_crypto_param context;
	enum rte_crypto_curve_id curve;
	enum rte_crypto_edward_instance instance;
};

static uint8_t ed25519_pkey[] = {
	0x83, 0x3f, 0xe6, 0x24, 0x09, 0x23, 0x7b, 0x9d,
	0x62, 0xec, 0x77, 0x58, 0x75, 0x20, 0x91, 0x1e,
	0x9a, 0x75, 0x9c, 0xec, 0x1d, 0x19, 0x75, 0x5b,
	0x7d, 0xa9, 0x01, 0xb9, 0x6d, 0xca, 0x3d, 0x42
};

static uint8_t ed25519_pubkey[] = {
	0xec, 0x17, 0x2b, 0x93, 0xad, 0x5e, 0x56, 0x3b,
	0xf4, 0x93, 0x2c, 0x70, 0xe1, 0x24, 0x50, 0x34,
	0xc3, 0x54, 0x67, 0xef, 0x2e, 0xfd, 0x4d, 0x64,
	0xeb, 0xf8, 0x19, 0x68, 0x34, 0x67, 0xe2, 0xbf
};

static uint8_t ed25519_sign[] = {
	0xdc, 0x2a, 0x44, 0x59, 0xe7, 0x36, 0x96, 0x33,
	0xa5, 0x2b, 0x1b, 0xf2, 0x77, 0x83, 0x9a, 0x00,
	0x20, 0x10, 0x09, 0xa3, 0xef, 0xbf, 0x3e, 0xcb,
	0x69, 0xbe, 0xa2, 0x18, 0x6c, 0x26, 0xb5, 0x89,
	0x09, 0x35, 0x1f, 0xc9, 0xac, 0x90, 0xb3, 0xec,
	0xfd, 0xfb, 0xc7, 0xc6, 0x64, 0x31, 0xe0, 0x30,
	0x3d, 0xca, 0x17, 0x9c, 0x13, 0x8a, 0xc1, 0x7a,
	0xd9, 0xbe, 0xf1, 0x17, 0x73, 0x31, 0xa7, 0x04
};

static uint8_t ed25519_message[] = {
	0xdd, 0xaf, 0x35, 0xa1, 0x93, 0x61, 0x7a, 0xba,
	0xcc, 0x41, 0x73, 0x49, 0xae, 0x20, 0x41, 0x31,
	0x12, 0xe6, 0xfa, 0x4e, 0x89, 0xa9, 0x7e, 0xa2,
	0x0a, 0x9e, 0xee, 0xe6, 0x4b, 0x55, 0xd3, 0x9a,
	0x21, 0x92, 0x99, 0x2a, 0x27, 0x4f, 0xc1, 0xa8,
	0x36, 0xba, 0x3c, 0x23, 0xa3, 0xfe, 0xeb, 0xbd,
	0x45, 0x4d, 0x44, 0x23, 0x64, 0x3c, 0xe8, 0x0e,
	0x2a, 0x9a, 0xc9, 0x4f, 0xa5, 0x4c, 0xa4, 0x9f
};

/** EDDSA ed25519 curve test params (RFC 8032) */
struct crypto_testsuite_eddsa_params eddsa_param_ed25519 = {
	.pkey = {
		.data = ed25519_pkey,
		.length = sizeof(ed25519_pkey),
	},
	.pubkey = {
		.data = ed25519_pubkey,
		.length = sizeof(ed25519_pubkey),
	},
	.sign = {
		.data = ed25519_sign,
		.length = sizeof(ed25519_sign),
	},
	.message = {
		.data = ed25519_message,
		.length = sizeof(ed25519_message),
	},
	.curve = RTE_CRYPTO_EC_GROUP_ED25519,
	.instance = RTE_CRYPTO_EDCURVE_25519
};

static uint8_t ed25519ctx_pkey[] = {
	0x03, 0x05, 0x33, 0x4e, 0x38, 0x1a, 0xf7, 0x8f,
	0x14, 0x1c, 0xb6, 0x66, 0xf6, 0x19, 0x9f, 0x57,
	0xbc, 0x34, 0x95, 0x33, 0x5a, 0x25, 0x6a, 0x95,
	0xbd, 0x2a, 0x55, 0xbf, 0x54, 0x66, 0x63, 0xf6
};

static uint8_t ed25519ctx_pubkey[] = {
	0xdf, 0xc9, 0x42, 0x5e, 0x4f, 0x96, 0x8f, 0x7f,
	0x0c, 0x29, 0xf0, 0x25, 0x9c, 0xf5, 0xf9, 0xae,
	0xd6, 0x85, 0x1c, 0x2b, 0xb4, 0xad, 0x8b, 0xfb,
	0x86, 0x0c, 0xfe, 0xe0, 0xab, 0x24, 0x82, 0x92
};

static uint8_t ed25519ctx_sign[] = {
	0x55, 0xa4, 0xcc, 0x2f, 0x70, 0xa5, 0x4e, 0x04,
	0x28, 0x8c, 0x5f, 0x4c, 0xd1, 0xe4, 0x5a, 0x7b,
	0xb5, 0x20, 0xb3, 0x62, 0x92, 0x91, 0x18, 0x76,
	0xca, 0xda, 0x73, 0x23, 0x19, 0x8d, 0xd8, 0x7a,
	0x8b, 0x36, 0x95, 0x0b, 0x95, 0x13, 0x00, 0x22,
	0x90, 0x7a, 0x7f, 0xb7, 0xc4, 0xe9, 0xb2, 0xd5,
	0xf6, 0xcc, 0xa6, 0x85, 0xa5, 0x87, 0xb4, 0xb2,
	0x1f, 0x4b, 0x88, 0x8e, 0x4e, 0x7e, 0xdb, 0x0d
};

static uint8_t ed25519ctx_message[] = {
	0xf7, 0x26, 0x93, 0x6d, 0x19, 0xc8, 0x00, 0x49,
	0x4e, 0x3f, 0xda, 0xff, 0x20, 0xb2, 0x76, 0xa8
};

static uint8_t ed25519ctx_context[] = {
	0x66, 0x6f, 0x6f
};

/** EDDSA ed25519ctx curve test params (RFC 8032) */
struct crypto_testsuite_eddsa_params eddsa_param_ed25519ctx = {
	.pkey = {
		.data = ed25519ctx_pkey,
		.length = sizeof(ed25519ctx_pkey),
	},
	.pubkey = {
		.data = ed25519ctx_pubkey,
		.length = sizeof(ed25519ctx_pubkey),
	},
	.sign = {
		.data = ed25519ctx_sign,
		.length = sizeof(ed25519ctx_sign),
	},
	.message = {
		.data = ed25519ctx_message,
		.length = sizeof(ed25519ctx_message),
	},
	.context = {
		.data = ed25519ctx_context,
		.length = sizeof(ed25519ctx_context),
	},
	.curve = RTE_CRYPTO_EC_GROUP_ED25519,
	.instance = RTE_CRYPTO_EDCURVE_25519CTX
};

static uint8_t ed25519ph_pkey[] = {
	0x83, 0x3f, 0xe6, 0x24, 0x09, 0x23, 0x7b, 0x9d,
	0x62, 0xec, 0x77, 0x58, 0x75, 0x20, 0x91, 0x1e,
	0x9a, 0x75, 0x9c, 0xec, 0x1d, 0x19, 0x75, 0x5b,
	0x7d, 0xa9, 0x01, 0xb9, 0x6d, 0xca, 0x3d, 0x42
};

static uint8_t ed25519ph_pubkey[] = {
	0xec, 0x17, 0x2b, 0x93, 0xad, 0x5e, 0x56, 0x3b,
	0xf4, 0x93, 0x2c, 0x70, 0xe1, 0x24, 0x50, 0x34,
	0xc3, 0x54, 0x67, 0xef, 0x2e, 0xfd, 0x4d, 0x64,
	0xeb, 0xf8, 0x19, 0x68, 0x34, 0x67, 0xe2, 0xbf
};

static uint8_t ed25519ph_sign[] = {
	0x98, 0xa7, 0x02, 0x22, 0xf0, 0xb8, 0x12, 0x1a,
	0xa9, 0xd3, 0x0f, 0x81, 0x3d, 0x68, 0x3f, 0x80,
	0x9e, 0x46, 0x2b, 0x46, 0x9c, 0x7f, 0xf8, 0x76,
	0x39, 0x49, 0x9b, 0xb9, 0x4e, 0x6d, 0xae, 0x41,
	0x31, 0xf8, 0x50, 0x42, 0x46, 0x3c, 0x2a, 0x35,
	0x5a, 0x20, 0x03, 0xd0, 0x62, 0xad, 0xf5, 0xaa,
	0xa1, 0x0b, 0x8c, 0x61, 0xe6, 0x36, 0x06, 0x2a,
	0xaa, 0xd1, 0x1c, 0x2a, 0x26, 0x08, 0x34, 0x06
};

static uint8_t ed25519ph_message[] = {
	0x61, 0x62, 0x63
};

/** EDDSA ed25519ph curve test params (RFC 8032) */
struct crypto_testsuite_eddsa_params eddsa_param_ed25519ph = {
	.pkey = {
		.data = ed25519ph_pkey,
		.length = sizeof(ed25519ph_pkey),
	},
	.pubkey = {
		.data = ed25519ph_pubkey,
		.length = sizeof(ed25519ph_pubkey),
	},
	.sign = {
		.data = ed25519ph_sign,
		.length = sizeof(ed25519ph_sign),
	},
	.message = {
		.data = ed25519ph_message,
		.length = sizeof(ed25519ph_message),
	},
	.curve = RTE_CRYPTO_EC_GROUP_ED25519,
	.instance = RTE_CRYPTO_EDCURVE_25519PH
};

static uint8_t ed448_pkey[] = {
	0xd6, 0x5d, 0xf3, 0x41, 0xad, 0x13, 0xe0, 0x08,
	0x56, 0x76, 0x88, 0xba, 0xed, 0xda, 0x8e, 0x9d,
	0xcd, 0xc1, 0x7d, 0xc0, 0x24, 0x97, 0x4e, 0xa5,
	0xb4, 0x22, 0x7b, 0x65, 0x30, 0xe3, 0x39, 0xbf,
	0xf2, 0x1f, 0x99, 0xe6, 0x8c, 0xa6, 0x96, 0x8f,
	0x3c, 0xca, 0x6d, 0xfe, 0x0f, 0xb9, 0xf4, 0xfa,
	0xb4, 0xfa, 0x13, 0x5d, 0x55, 0x42, 0xea, 0x3f,
	0x01
};

static uint8_t ed448_pubkey[] = {
	0xdf, 0x97, 0x05, 0xf5, 0x8e, 0xdb, 0xab, 0x80,
	0x2c, 0x7f, 0x83, 0x63, 0xcf, 0xe5, 0x56, 0x0a,
	0xb1, 0xc6, 0x13, 0x2c, 0x20, 0xa9, 0xf1, 0xdd,
	0x16, 0x34, 0x83, 0xa2, 0x6f, 0x8a, 0xc5, 0x3a,
	0x39, 0xd6, 0x80, 0x8b, 0xf4, 0xa1, 0xdf, 0xbd,
	0x26, 0x1b, 0x09, 0x9b, 0xb0, 0x3b, 0x3f, 0xb5,
	0x09, 0x06, 0xcb, 0x28, 0xbd, 0x8a, 0x08, 0x1f,
	0x00
};

static uint8_t ed448_sign[] = {
	0x55, 0x4b, 0xc2, 0x48, 0x08, 0x60, 0xb4, 0x9e,
	0xab, 0x85, 0x32, 0xd2, 0xa5, 0x33, 0xb7, 0xd5,
	0x78, 0xef, 0x47, 0x3e, 0xeb, 0x58, 0xc9, 0x8b,
	0xb2, 0xd0, 0xe1, 0xce, 0x48, 0x8a, 0x98, 0xb1,
	0x8d, 0xfd, 0xe9, 0xb9, 0xb9, 0x07, 0x75, 0xe6,
	0x7f, 0x47, 0xd4, 0xa1, 0xc3, 0x48, 0x20, 0x58,
	0xef, 0xc9, 0xf4, 0x0d, 0x2c, 0xa0, 0x33, 0xa0,
	0x80,
	0x1b, 0x63, 0xd4, 0x5b, 0x3b, 0x72, 0x2e, 0xf5,
	0x52, 0xba, 0xd3, 0xb4, 0xcc, 0xb6, 0x67, 0xda,
	0x35, 0x01, 0x92, 0xb6, 0x1c, 0x50, 0x8c, 0xf7,
	0xb6, 0xb5, 0xad, 0xad, 0xc2, 0xc8, 0xd9, 0xa4,
	0x46, 0xef, 0x00, 0x3f, 0xb0, 0x5c, 0xba, 0x5f,
	0x30, 0xe8, 0x8e, 0x36, 0xec, 0x27, 0x03, 0xb3,
	0x49, 0xca, 0x22, 0x9c, 0x26, 0x70, 0x83, 0x39,
	0x00
};

static uint8_t ed448_message[] = {
	0xbd, 0x0f, 0x6a, 0x37, 0x47, 0xcd, 0x56, 0x1b,
	0xdd, 0xdf, 0x46, 0x40, 0xa3, 0x32, 0x46, 0x1a,
	0x4a, 0x30, 0xa1, 0x2a, 0x43, 0x4c, 0xd0, 0xbf,
	0x40, 0xd7, 0x66, 0xd9, 0xc6, 0xd4, 0x58, 0xe5,
	0x51, 0x22, 0x04, 0xa3, 0x0c, 0x17, 0xd1, 0xf5,
	0x0b, 0x50, 0x79, 0x63, 0x1f, 0x64, 0xeb, 0x31,
	0x12, 0x18, 0x2d, 0xa3, 0x00, 0x58, 0x35, 0x46,
	0x11, 0x13, 0x71, 0x8d, 0x1a, 0x5e, 0xf9, 0x44
};

/** EDDSA ed448 curve test params (RFC 8032) */
struct crypto_testsuite_eddsa_params eddsa_param_ed448 = {
	.pkey = {
		.data = ed448_pkey,
		.length = sizeof(ed448_pkey),
	},
	.pubkey = {
		.data = ed448_pubkey,
		.length = sizeof(ed448_pubkey),
	},
	.sign = {
		.data = ed448_sign,
		.length = sizeof(ed448_sign),
	},
	.message = {
		.data = ed448_message,
		.length = sizeof(ed448_message),
	},
	.curve = RTE_CRYPTO_EC_GROUP_ED448,
	.instance = RTE_CRYPTO_EDCURVE_448
};

static uint8_t ed448ph_pkey[] = {
	0x83, 0x3f, 0xe6, 0x24, 0x09, 0x23, 0x7b, 0x9d,
	0x62, 0xec, 0x77, 0x58, 0x75, 0x20, 0x91, 0x1e,
	0x9a, 0x75, 0x9c, 0xec, 0x1d, 0x19, 0x75, 0x5b,
	0x7d, 0xa9, 0x01, 0xb9, 0x6d, 0xca, 0x3d, 0x42,
	0xef, 0x78, 0x22, 0xe0, 0xd5, 0x10, 0x41, 0x27,
	0xdc, 0x05, 0xd6, 0xdb, 0xef, 0xde, 0x69, 0xe3,
	0xab, 0x2c, 0xec, 0x7c, 0x86, 0x7c, 0x6e, 0x2c,
	0x49
};

static uint8_t ed448ph_pubkey[] = {
	0x25, 0x9b, 0x71, 0xc1, 0x9f, 0x83, 0xef, 0x77,
	0xa7, 0xab, 0xd2, 0x65, 0x24, 0xcb, 0xdb, 0x31,
	0x61, 0xb5, 0x90, 0xa4, 0x8f, 0x7d, 0x17, 0xde,
	0x3e, 0xe0, 0xba, 0x9c, 0x52, 0xbe, 0xb7, 0x43,
	0xc0, 0x94, 0x28, 0xa1, 0x31, 0xd6, 0xb1, 0xb5,
	0x73, 0x03, 0xd9, 0x0d, 0x81, 0x32, 0xc2, 0x76,
	0xd5, 0xed, 0x3d, 0x5d, 0x01, 0xc0, 0xf5, 0x38,
	0x80
};

static uint8_t ed448ph_sign[] = {
	0x82, 0x2f, 0x69, 0x01, 0xf7, 0x48, 0x0f, 0x3d,
	0x5f, 0x56, 0x2c, 0x59, 0x29, 0x94, 0xd9, 0x69,
	0x36, 0x02, 0x87, 0x56, 0x14, 0x48, 0x32, 0x56,
	0x50, 0x56, 0x00, 0xbb, 0xc2, 0x81, 0xae, 0x38,
	0x1f, 0x54, 0xd6, 0xbc, 0xe2, 0xea, 0x91, 0x15,
	0x74, 0x93, 0x2f, 0x52, 0xa4, 0xe6, 0xca, 0xdd,
	0x78, 0x76, 0x93, 0x75, 0xec, 0x3f, 0xfd, 0x1b,
	0x80,
	0x1a, 0x0d, 0x9b, 0x3f, 0x40, 0x30, 0xcd, 0x43,
	0x39, 0x64, 0xb6, 0x45, 0x7e, 0xa3, 0x94, 0x76,
	0x51, 0x12, 0x14, 0xf9, 0x74, 0x69, 0xb5, 0x7d,
	0xd3, 0x2d, 0xbc, 0x56, 0x0a, 0x9a, 0x94, 0xd0,
	0x0b, 0xff, 0x07, 0x62, 0x04, 0x64, 0xa3, 0xad,
	0x20, 0x3d, 0xf7, 0xdc, 0x7c, 0xe3, 0x60, 0xc3,
	0xcd, 0x36, 0x96, 0xd9, 0xd9, 0xfa, 0xb9, 0x0f,
	0x00
};

static uint8_t ed448ph_message[] = {
	0x61, 0x62, 0x63
};

/** EDDSA ed448ph curve test params (RFC 8032) */
struct crypto_testsuite_eddsa_params eddsa_param_ed448ph = {
	.pkey = {
		.data = ed448ph_pkey,
		.length = sizeof(ed448ph_pkey),
	},
	.pubkey = {
		.data = ed448ph_pubkey,
		.length = sizeof(ed448ph_pubkey),
	},
	.sign = {
		.data = ed448ph_sign,
		.length = sizeof(ed448ph_sign),
	},
	.message = {
		.data = ed448ph_message,
		.length = sizeof(ed448ph_message),
	},
	.curve = RTE_CRYPTO_EC_GROUP_ED448,
	.instance = RTE_CRYPTO_EDCURVE_448PH
};

#endif /* __TEST_CRYPTODEV_EDDSA_TEST_VECTORS_H__ */
